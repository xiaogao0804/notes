https://zhuanlan.zhihu.com/p/25816248


跨域：是指通过js在不同的域之间进行数据传输和通信，比如用ajax向一个不同的域请求数据，或者通过js获取页面中不同域的框架中(iframe)的数据.

      只要协议、域名、端口有任何一个不同，都被当作是不同的域。

      http://store.company.com/dir/other.html  

      https://store.company.com/dir/other.html  失败  协议不同

      http://store.company.com:82/dir/other.html  失败  端口不同

      http://news.company.com/dir/other.html   失败  主机名不同

解决跨域的方法：
 
1、jsonp

      XMLHttpRequest 不能请求不同域上的数据

      但是，可以在页面上引用不同域上的js脚本，jsonp正是利用了这个特性

  原理：通过script标签引入一个js文件，这个js文件载入成功后会执行我们在url参数中指定的函数（回调函数callback），

        并且会把我们需要的json数据作为参数传入。所以jsonp是需要服务器端的页面进行相应的配合的。

 jq方法：

 <script>

      $.getJSON('http://example.com/data.php?callback=?', function(jsondata){

             //处理获得json数据

      })

</script>

$.getJSON方法会自动判断是否跨域，不跨域的话，就调用普通的ajax方法；

   跨域的话，则会以异步加载js文件的形式来调用jsonp的回调函数。


2、通过修改document.domain来跨子域

    document.domain: 返回当前的服务器域名  就是到com cn等那块

   浏览器都有一个同源策略，其限制之一，就是不同源中会有限制：

   限制一：不能通过ajax的方法去请求不同源中的文档

   限制二：浏览器中不同域的框架之间是不能进行js的交互操作的

   但是，不同源之间是能够获取到彼此的window对象的，但是，并不能获取到window对象的属性和方法（html5中的postMessage方法是一个例外，还有些浏览器比如ie6也可以使用top、parent等少数几个属性)

操作：

     有一个页面，它的地址是http://www.example.com/a.html ， 在这个页面里面有一个iframe，它的src是http://example.com/b.html, 很显然，这个页面与它里面的iframe框架是不同域的，所以我们是无法通过在页面中书写js代码来获取iframe中的东西的：

     document.domain的设置是有限制的，我们只能把document.domain设置成自身或更高一级的父域，且主域必须相同
     
     在页面 http://www.example.com/a.html 中设置document.domain:

     <iframe src="http://www.example.com/b.html"  id='iframe' onLoad='test()'></iframe>

     <script>

       document.domain="example.com";  //设置成主域名

       function test(){

           alert(document.getElementById('iframe')).contentWindow;   // 在a页面中获取b页面的window

        }
 
    </script>

    在页面 http://www.example.com/b.html 中设置document.domain:

     <script>

       document.domain="example.com";  //在iframe载入的这个页面也设置document.domain,使之与主页面的document.domain相同

    </script>

    这样，我们在a页面中就可以通过js访问到iframe中的各种属性和对象了。 


3.使用window.name来进行跨域

window对象有个name属性，该属性有个特征：即在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个window.name的，每个页面对window.name都有读写的权限，

window.name是持久存在一个窗口载入过的所有页面中的，并不会因新页面的载入而进行重置。

比如有一个www.example.com/a.html页面,需要通过a.html页面里的js来获取另一个位于不同域上的页面www.cnblogs.com/data.html里的数据。

先在data.html中设置window.name  这值设置的是a.html想要得到的数据

<script>

  window.name="我就是页面a.html想要的数据，所有可以转化成字符串来传递的数据都可以在这里使用，比如可以传递一个json数据"

</script>

如何使a.html页面不跳转就能得到data.html里面的数据呢？

   答案就是在a.html页面中使用一个隐藏的iframe来充当一个中间人的角色，由iframe来获取data.html的数据，然后a.html再去得到iframe获取的数据

   充当中间人的iframe想要获取到data.html的通过window.name设置的数据，只需要把这个iframe的src设为www.cnblogs.com/data.html就行了。

   然后a.html想要得到iframe所获取到的数据，也就是想要得到iframe的window.name的值，还必须把这个iframe的src设成跟a.html页面同一个域才行，

   不然根据前面讲的同源策略，a.html是不能访问到iframe里的window.name属性的。这就是整个跨域过程。

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>window.name跨域</title>

    <script>

        function getData(){       //iframe载入data.html页面后会执行此函数

             var iframe=document.getElementById('proxy');

             iframe.onload=function(){    //这个时候a.html与iframe已经是处于同一源了，可以互相访问

             var data=iframe.contentWindow.name;//获取iframe里的window.name，也就是data.html页面给他设置的数据

             alert(data); //成功获取到了data.html里的数据
           }
       iframe.src='b.html';  //这里的b.html为随便的一个页面，只要与a.html同源就行，目的是让a.html能访问到iframe里的东西，设置成about：blank就行
     }
   
    </script>    

</head>
<body>    
     <iframe id='proxy' src="http://www.cnblogs.com/data.html" style="display:none" onload='getData()'></iframe>
</body>
</html>


4、使用HTML5中新引进的window.postMessage方法来跨域传送数据

   window.postMessage(message,targetOrigin) 方法是html5新引进的特性，可以使用它来向其它的window对象发送消息，无论这个window对象是属于同源或不同源，目前IE8+、FireFox、Chrome、Opera等浏览器都已经支持window.postMessage方法。


   window.postMessage(message,targetOrigin) 方法是html5新引进的特性，可以使用它来向其它的window对象发送消息，无论这个window对象是属于同源或不同源，目前IE8+、FireFox、Chrome、Opera等浏览器都已经支持window.postMessage方法。

   调用postMessage方法的window对象是指要接收消息的那一个window对象，该方法的第一个参数message为要发送的消息，类型只能为字符串；第二个参数targetOrigin用来限定接收消息的那个window对象所在的域，如果不想限定域，可以使用通配符 * 。
 
   需要接收消息的window对象，可是通过监听自身的message事件来获取传过来的消息，消息内容储存在该事件对象的data属性中。

   上面所说的向其他window对象发送消息，其实就是指一个页面有几个框架的那种情况，因为每一个框架都有一个window对象。在讨论第二种方法的时候，我们说过，不同域的框架间是可以获取到对方的window对象的，而且也可以使用window.postMessage这个方法。下面看一个简单的示例，有两个页面

     
   /*这是页面http://test.com/a.html的代码*/
<script>
   function onLoad(){
      var iframe=document.getElementById('iframe');
      var win=iframe.contentWindow;  //获取window对象
      win.postMessage('哈哈，我是来自页面a的消息','*');//向不同域的http://test.com/b.html发送消息
   }  
</script>

/*这是页面http://test.com/b.html的代码*/
<script>
   window.onmessage=function(e){  //注册message事件来接收消息
      e=e||event;  //获取事件对象
      alert(e.data);//通过data属性得到传送的消息
   }
</script>

