           在客户端的数据存储方法：

   cookies    local Storage  session Storage   IndexedDB   WebSQL(被废弃)


cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。
cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。
sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。
存储大小：
cookie数据大小不能超过4k。
sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。
有期时间：
localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；
sessionStorage  数据在当前浏览器窗口关闭后自动删除。
cookie          设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭


1.cookie: 

一般，cookie是由服务端发送给客户端，客户端存储下来，然后再随请求发回给服务端

所有浏览器都支持cookie

操作：

//Create 

document.cookie="user_name=xiaogao";
document.cookie="user_age=25;max-age=31536000;secure";   //secure只能用HTTPS协议发送给服务器，HTTP协议无法发送 

//Read(All)  能读取到所有cookie

console.log(document.cookie);

//Update

document.cookie="user_age=24;max-age=31536000;secure";

//Delete
document.cookie="user_name=xiaogao; expires=Thu,01 Jan 1970 00:00:01  GMT";   //通过设置有效期来删除cookie

优点：

 能用于和服务端通信       当cookie快要自动过期时，我们可以重新设置，而不是删除

缺点:

增加了文档传输的负载    只能存储少量的数据    只能存储字符串   潜在的安全问题

2.local Storage

local Storage 除了可以存储字符串 还可以存储字符串化的json数据  其实还是只能存储字符串

IE8+及其他浏览器支持

操作：

//create

const user={name:'xiaogao',age:25}  //创建一个对象

localStorage.setItem('user',JSON.stringify(user));    //创建字符串化的json   存储时进行序列化


//read(single) 只能读取单个

console.log(JSON.parse(localStorage.getItem('user')));   //获取缓存数据 并转化为json对象   读取时进行反序列化

//update

const updateUser={name:'xiaogao', age:24}

localStorage.setItem('user',JSON.stringify(updateUser));

//delete
localStorage.removeItem('user');

优点：

提供了更直观的接口来存储数据   更安全    能存储更多数据

缺点：

只能存储字符串数据（直接存储复合数据类型如数组/对象等，都会转化为字符串，会存在存取数据不一致的情况）；

为避免存储数据不一致的情况，存储复合数据时进行序列化，读取时进行反序列化

localStorage.setItem('test',JSON.stringify({a:1,b:2}));

console.log(typeof localStorage.getItem('test')); //string

console.log(JSON.parse(localStorage.getItem('test')));//{a:1,b:2}


session Storage：


操作：

//create

const user={name:'xiaogao',age:25}  //创建一个对象

sessionStorage.setItem('user',JSON.stringify(user));    //创建字符串化的json   存储时进行序列化


//read(single) 只能读取单个

console.log(JSON.parse(localStorage.getItem('user')));   //获取缓存数据 并转化为json对象   读取时进行反序列化

//update

const updateUser={name:'xiaogao', age:24}

sessionStorage.setItem('user',JSON.stringify(updateUser));

//delete

sessionStorage.removeItem('user');

优点 缺点 浏览器支持和localStorage一样


IndexedDB

能存储更复杂的数据

操作：

在创建/读取/更新/删除任何数据之前，首先需要打开数据库，创建我们需要的stores（类似于数据库中创建一个表）

function OpenIDB(){

   return idb.open('sampleDB',1,function(upgradeDb){

      const users=upgradeDb.createObjectStore('users',{

        keyPath:'name'

    })

  })

}  


//创建或者更新store中的数据

// 1.open up the database

OpenIDB().then((db)=>{

    const dbStore='users';

// 2.open a new read/write transaction

const transaction=db.transaction(dbStore,'readwrite');
const store=transaction.objectStore(dbStore);

// 3.Add the data to the store

    store.put({

       name:'xiaogao',
       age:25
  });

//4.complete the transaction
  
return transaction.complete;

})


// 检索数据

// 1.open up the database

   OpenIDB().then(db)=>{
 
    const dbStore='users';

// 2.open a new read-only transaction with the store within the database

   const transaction=db.transaction(dbStore);
   const store=transaction.objectStore(dbStore);

//3.return the data

   return  store.get('xiaogao');}).then((item)=>{

    console.log(item);

})


//删除数据

// 1.open up the database

   OpenIDB().then(db)=>{
 
    const dbStore='users';

// 2.open a new read-only transaction with the store within the database

   const transaction=db.transaction(dbStore);
   const store=transaction.objectStore(dbStore);

//3.delete the data corresponding

    store.delete('xiaogao');

//4.complete the transaction
  
   return transaction.complete;

})

优点：

能够处理复杂的和结构化的数据   更大的存储空间   每个database中可以有更多的databases和tables   对其有更多的交互控制

缺点：  比web storage api 更难于应用

支持：IE10及其他浏览器
